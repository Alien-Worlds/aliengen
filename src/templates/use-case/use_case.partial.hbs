{{#if print_jsdocs}}
/**
 * Represents the {{name}}UseCase use case.
 * This use case ...
 *
 * @class
 */
 {{/if}}
{{#if use_ioc}}
@injectable()
{{/if}}
export class {{name}}UseCase implements UseCase<void> {
  public static Token = '{{constant_case name}}_USE_CASE';

  {{#if print_jsdocs}}
  /**
   * Creates an instance of the {{name}}UseCase class.
   *
   * @constructor
  {{#if injections}}
  {{#each injections}}
  {{> jsdoc_param this}}
  {{/each}}
  {{else}}
  {{#each props}}
  {{> jsdoc_param this}}
  {{/each}}
  {{/if}}
   */
   {{/if}}
  constructor(
    {{#if injections}}
    {{#each injections}}
    {{> inject this}}
    {{/each}}
    {{else}}
    {{#each props}}
    {{> constructor_prop this}}
    {{/each}}
    {{/if}}
    {{#if print_markers}}/*__constructor__*/{{/if}}
  ) { }
  {{#if print_jsdocs}}
  /**
  * Executes the {{name}}UseCase to ...
  *
  * @async
  * @returns {Promise<Result<void>>}
  */
  {{/if}}
  public async execute(): Promise<Result<void>> {
    // ...
    return Result.withoutContent();
  }
}