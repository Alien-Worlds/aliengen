{{! template for delta mapper e.g. src/contracts/dao-worlds/deltas/data/mappers/dao-worlds-delta.mapper.ts }}
{{> warn-do-not-edit}}

import { 
{{#each deltas}}
  {{pascalCase .}},
{{/each}}
} from '../../domain/entities';
import { ContractDelta, MapperImpl, parseToBigInt } from '@alien-worlds/api-core';
import { MongoDB, MongoMapper } from '@alien-worlds/storage-mongodb';
import { DataEntityType } from '../../domain/entities/{{paramCase contract}}-delta';
import { {{pascalCase contract}}DeltaMongoModel, {{pascalCase contract}}DeltaRawModel } from '../dtos';
import { {{pascalCase contract}}TableName } from '../../domain/enums';
{{#each deltas}}
import { {{pascalCase .}}MongoMapper, {{pascalCase .}}RawMapper } from "./{{.}}.mapper";
{{/each}}

// Mongo Mapper
export class {{pascalCase contract}}DeltaMongoMapper
  extends MongoMapper<ContractDelta<DataEntityType>, {{pascalCase contract}}DeltaMongoModel>
{
  public fromEntity(
    entity: ContractDelta<DataEntityType>
  ): {{pascalCase contract}}DeltaMongoModel {
    let entityData;
    switch (entity.table) {
      {{#each deltas}}
      case {{pascalCase ../contract}}TableName.{{pascalCase .}}:
        entityData = new {{pascalCase .}}MongoMapper().fromEntity(
          entity.data as {{pascalCase .}}
        );
        break;
      {{/each}}
    }

    const model: {{pascalCase contract}}DeltaMongoModel = {
      block_timestamp: entity.blockTimestamp,
      block_number: new MongoDB.Long(entity.blockNumber),
      code: entity.code,
      scope: entity.scope,
      table: entity.table,
      data: entityData,
      payer: entity.payer,
      primary_key: new MongoDB.Long(entity.primaryKey),
      present: entity.present,
    };

    if (entity.id && MongoDB.ObjectId.isValid(entity.id)) {
      model._id =  new MongoDB.ObjectId(entity.id);
    }
    
    return model;
  }

  public toEntity(
    mongoModel: {{pascalCase contract}}DeltaMongoModel
  ): ContractDelta<DataEntityType> {
    let data;
    switch (mongoModel.table) {
      {{#each deltas}}
      case {{pascalCase ../contract}}TableName.{{pascalCase .}}:
        data = new {{pascalCase .}}MongoMapper().toEntity(mongoModel.data);
        break;
      {{/each}}
    }

    const {
      _id,
      block_number,
      code,
      scope,
      table,
      payer,
      primary_key,
      present,
      block_timestamp,
    } = mongoModel;

    return new ContractDelta<DataEntityType>(
      _id.toString(),
      parseToBigInt(block_number),
      code,
      scope,
      table,
      data,
      payer,
      parseToBigInt(primary_key),
      present,
      block_timestamp
    );
  }
}

// Processor Task Mapper
export class {{pascalCase contract}}DeltaProcessorTaskMapper extends MapperImpl<
  ContractDelta<DataEntityType, {{pascalCase contract}}DeltaRawModel>, 
    {{pascalCase contract}}DeltaRawModel
> {
  public fromEntity(
    entity: ContractDelta<DataEntityType, {{pascalCase contract}}DeltaRawModel>
  ): {{pascalCase contract}}DeltaRawModel {
    throw new Error('method not implemented');
  }

  public toEntity(
    rawModel: {{pascalCase contract}}DeltaRawModel
  ): ContractDelta<DataEntityType, {{pascalCase contract}}DeltaRawModel> {
    let data;
    switch (rawModel.table) {
      {{#each deltas}}
      case {{pascalCase ../contract}}TableName.{{pascalCase .}}:
        data = new {{pascalCase .}}RawMapper().toEntity(rawModel.data);
        break;
      {{/each}}
    }

    const {
      block_number,
      code,
      scope,
      table,
      payer,
      primary_key,
      present,
      block_timestamp,
    } = rawModel;

    return new ContractDelta<DataEntityType, {{pascalCase contract}}DeltaRawModel>(
      '',
      parseToBigInt(block_number),
      code,
      scope,
      table,
      data,
      payer,
      parseToBigInt(primary_key),
      present,
      block_timestamp,
    );
  }
}