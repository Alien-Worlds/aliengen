{{! template for action mapper e.g. src/contracts/dao-worlds/actions/data/mappers/dao-worlds-action.mapper.ts }}
{{> warn-do-not-edit}}
import {
  Mapper,
  MissingKeyMappingsError,
  PropertyMapping,
} from '@alien-worlds/api-core';
import { MongoDB } from '@alien-worlds/storage-mongodb';

import { {{#each mappers}}{{pascalCase this.name}}{{#unless @last}}, {{/unless}} {{/each}} } from "../../domain/entities";
import { {{#each mappers}}{{pascalCase this.documentName}}, {{pascalCase this.name}}RawModel{{#unless @last}}, {{/unless}} {{/each}} } from "../dtos/{{name}}.dto";
import { DataEntityType } from '../../domain/entities/{{paramCase contract}}-action';

// Mongo Mappers
{{#each mappers}}
export class {{pascalCase this.name}}MongoMapper
  implements Mapper<{{pascalCase this.name}}, {{pascalCase this.documentName}}>
{
  private readonly mappingFromEntity = new Map<string, PropertyMapping>([
    {{#each props}}
    [
      '{{camelCase this.key}}', 
      { 
        key: '{{this.key}}', 
        mapper: {{~#if this.type.requiresCodeGen}}{{~#if this.type.isArray}} (value: {{{pascalCase this.type.sourceName}}}[]) => 
          value.map(new {{{pascalCase this.type.sourceName}}}MongoMapper().fromEntity),
          {{else}}
            new {{{pascalCase this.type.sourceName}}}MongoMapper().fromEntity,
          {{~/if}}
        {{~else}} (value: {{{this.type.name}}}) => value,
        {{/if}}
      },
    ],
    {{/each}}
  ]);

  public fromEntity(entity: {{pascalCase this.name}} | DataEntityType): {{pascalCase this.name}}MongoModel {
    const { id, ...rest } = entity;
    const missingMappings: string[] = [];

    const mongoModel: {{pascalCase this.name}}MongoModel = {};

    if (id) {
      mongoModel._id = new MongoDB.ObjectId(id);
    }

    Object.keys(rest).forEach(key => {
      const mapping = this.mappingFromEntity.get(key);

      if (mapping) {
        document[mapping.key] = mapping.mapper(rest[key]);
      } else {
        missingMappings.push(key);
      }
    });

    if (missingMappings.length > 0) {
      throw new MissingKeyMappingsError(missingMappings);
    }

    return mongoModel;
  }

  public toEntity(mongoModel: {{pascalCase this.documentName}}): {{pascalCase this.name}} {
    const { 
    {{#each props}}
      {{this.key}},
    {{/each}}
      _id, 
      ...rest
    } = mongoModel;

    return {{pascalCase this.name}}.create(
    {{#each props}}
    {{#if this.type.requiresCodeGen}}
      {{~#if this.type.isArray}}
        {{this.key}}?.map(new {{pascalCase this.type.sourceName}}MongoMapper().toEntity) ?? []
      {{else}}
        {{this.key}}
          ? new {{pascalCase this.type.sourceName}}MongoMapper().toEntity({{this.key}})
          : {{pascalCase this.type.sourceName}}.getDefault()
      {{~/if}}
    {{~else}}
      {{this.key}} ?? {{{this.type.defaultValue}}}
    {{~/if}},
    {{/each}}
      _id instanceof MongoDB.ObjectId ? _id.toString() : undefined,
      rest
    );
  }
}

{{/each}}

// Raw mappers
{{#each mappers}}
export class {{pascalCase this.name}}RawMapper
  implements Mapper<{{pascalCase this.name}}, {{pascalCase this.name}}RawModel>
{
  public fromEntity(entity: {{pascalCase this.name}}): {{pascalCase this.name}}RawModel {
    throw new Error('Method not implemented');
  }

  public toEntity(rawModel: {{pascalCase this.name}}RawModel): {{pascalCase this.name}} {
    const { 
    {{#each props}}
      {{this.key}},
    {{/each}}
      ...rest
    } = rawModel;

    return {{pascalCase this.name}}.create(
    {{#each props}}
    {{#if this.type.requiresCodeGen}}
      {{~#if this.type.isArray}}
        {{this.key}}?.map(new {{pascalCase this.type.sourceName}}RawMapper().toEntity) ?? []
      {{else}}
        {{this.key}}
          ? new {{pascalCase this.type.sourceName}}RawMapper().toEntity({{this.key}})
          : {{pascalCase this.type.sourceName}}.getDefault()
      {{~/if}}
    {{~else}}
      {{this.key}} ?? {{{this.type.defaultValue}}}
    {{~/if}},
    {{/each}}
      undefined,
      rest
    );
  }
}

{{/each}}