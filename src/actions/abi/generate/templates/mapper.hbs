{{! template for action mapper e.g. src/contracts/dao-worlds/actions/data/mappers/dao-worlds-action.mapper.ts }}
{{> warn-do-not-edit}}
import { MapperImpl } from '@alien-worlds/api-core';
import { MongoDB } from '@alien-worlds/storage-mongodb';
{{> imports}}
import { {{#each entities}}{{pascalCase this.name}}{{#unless @last}}, {{/unless}} {{/each}} } from "../../domain/entities";
import { {{#each entities}}{{pascalCase this.name}}MongoModel, {{pascalCase this.name}}RawModel{{#unless @last}}, {{/unless}} {{/each}} } from "../dtos/{{name}}.dto";

// Mongo Mappers
{{#each entities}}
export class {{pascalCase this.name}}MongoMapper
  extends MapperImpl<{{pascalCase this.name}}, {{pascalCase this.name}}MongoModel>
{
  constructor() {
    super();

  {{#each props}}
    this.mappingFromEntity.set('{{camelCase this.key}}', { 
      key: '{{this.key}}', 
      mapper: {{{buildMappingFromEntity this "mongo"}}}
    });

  {{/each}}
  }

  public toEntity(mongoModel: {{pascalCase this.name}}MongoModel): {{pascalCase this.name}} {
    const { 
    {{#each props}}
      {{this.key}},
    {{/each}}
      _id, 
      ...rest
    } = mongoModel;

    return {{pascalCase this.name}}.create(
    {{#each props}}
      {{{buildMappingToEntity this "mongo"}}}
    {{/each}}
      _id instanceof MongoDB.ObjectId ? _id.toString() : undefined,
      rest
    );
  }
}

{{/each}}

// Raw mappers
{{#each entities}}
export class {{pascalCase this.name}}RawMapper
  extends MapperImpl<{{pascalCase this.name}}, {{pascalCase this.name}}RawModel>
{
  public fromEntity(entity: {{pascalCase this.name}}): {{pascalCase this.name}}RawModel {
    throw new Error('Method not implemented');
  }

  public toEntity(rawModel: {{pascalCase this.name}}RawModel): {{pascalCase this.name}} {
    const { 
    {{#each props}}
      {{this.key}},
    {{/each}}
      ...rest
    } = rawModel;

    return {{pascalCase this.name}}.create(
    {{#each props}}
      {{{buildMappingToEntity this "raw"}}}
    {{/each}}
      undefined,
      rest
    );
  }
}

{{/each}}