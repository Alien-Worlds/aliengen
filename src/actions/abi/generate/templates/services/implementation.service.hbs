{{! template for service definition e.g. src/contracts/dao-worlds/services/dao-worlds-contract.service-impl.ts }}
{{> warn-do-not-edit}}
import { 
{{#each deltas}}
  {{ pascalCase @key}}RawModel,
{{/each}}
} from '../deltas/data/dtos';
import { 
  EosRpcSourceImpl,
  EosSmartContractServiceImpl,
} from '@alien-worlds/eos';

import { {{pascalCase contract}}ContractService } from './{{paramCase contract}}-contract.service';
import { GetTableRowsOptions, Result } from '@alien-worlds/api-core';

/**
 * A service class for interacting with the {{contract}} smart contract.
 * 
 * @class {{pascalCase contract}}ContractServiceImpl
 * @extends {EosSmartContractServiceImpl}
 * @implements { {{pascalCase contract}}ContractService}
*/
export class {{pascalCase contract}}ContractServiceImpl
  extends EosSmartContractServiceImpl
  implements {{pascalCase contract}}ContractService 
{
  /**
   * Creates an instance of {{pascalCase contract}}ContractServiceImpl.
   * 
   * @constructor
   * @param {EosRpcSourceImpl} eosRpcSourceImpl - The EOS RPC source to use for interactions.
   * @param {string} serviceUrl - Service Url
   */
  constructor(eosRpcSourceImpl: EosRpcSourceImpl, serviceUrl: string) {
    super(eosRpcSourceImpl, serviceUrl, '{{contract}}');
  }

{{#each deltas}}
  /**
   * A EosSmartContractServiceImpl for the {{@key}} table.
   * 
   * @type {EosSmartContractServiceImpl}
   * @param {GetTableRowsOptions} options 
   */
  public async fetch{{pascalCase @key}} (
    options?: GetTableRowsOptions
  ): Promise<Result<{{pascalCase @key}}RawModel[], Error>> {
    const table_key = '{{.}}';
    const tableRowOptions = {
      ...options,
      code: '{{../contract}}',
      table: '{{@key}}',
      table_key,
    };

    return options?.limit > 0
      ? await this.getMany<{{pascalCase @key}}RawModel>(tableRowOptions)
      : await this.getAll<{{pascalCase @key}}RawModel>(table_key, tableRowOptions);
  }
{{/each}}
}
