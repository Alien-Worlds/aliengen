{{! template for action/delta/service IOC config e.g. src/contracts/dao-worlds/ioc.config.ts }}
{{> warn-do-not-edit}}
import { Container, RepositoryImpl } from '@alien-worlds/api-core';
import { 
  MongoConfig,
  MongoQueryBuilders, 
  MongoSource,
} from '@alien-worlds/storage-mongodb';

import { {{pascalCase contract}}ActionMongoMapper } from './actions/data/mappers';
import { {{pascalCase contract}}ActionMongoSource } from './actions/data/data-sources';
import { {{pascalCase contract}}ActionRepository } from './actions/domain/repositories';
import { {{pascalCase contract}}ContractService } from "./services/{{paramCase contract}}-contract.service";
import { {{pascalCase contract}}ContractServiceImpl } from "./services/{{paramCase contract}}-contract.service-impl";
import { {{pascalCase contract}}DeltaMongoMapper } from './deltas/data/mappers';
import { {{pascalCase contract}}DeltaMongoSource } from './deltas/data/data-sources';
import { {{pascalCase contract}}DeltaRepository } from './deltas/domain/repositories';
import { EosRpcSourceImpl } from '@alien-worlds/eos';

export const setup{{pascalCase contract}}ActionRepository = async (
  mongo: MongoSource | MongoConfig,
  container?: Container
): Promise<{{pascalCase contract}}ActionRepository> => {
  let mongoSource: MongoSource;
  if (mongo instanceof MongoSource) {
    mongoSource = mongo;
  } else {
    mongoSource = await MongoSource.create(mongo);
  }

  const mapper = new {{pascalCase contract}}ActionMongoMapper();
  
  const repository = new RepositoryImpl(
    new {{pascalCase contract}}ActionMongoSource(mongoSource),
    mapper,
    new MongoQueryBuilders(mapper)
  );

  if (container) {
    container
      .bind<{{pascalCase contract}}ActionRepository>({{pascalCase contract}}ActionRepository.Token)
      .toConstantValue(repository);
  }

  return repository;
};

export const setup{{pascalCase contract}}DeltaRepository = async (
  mongo: MongoSource | MongoConfig,
  container?: Container
): Promise<{{pascalCase contract}}DeltaRepository> => {
  let mongoSource: MongoSource;
  if (mongo instanceof MongoSource) {
    mongoSource = mongo;
  } else {
    mongoSource = await MongoSource.create(mongo);
  }

  const mapper = new {{pascalCase contract}}DeltaMongoMapper();
  
  const repository = new RepositoryImpl(
    new {{pascalCase contract}}DeltaMongoSource(mongoSource),
    mapper,
    new MongoQueryBuilders(mapper)
  );

  if (container) {
    container
      .bind<{{pascalCase contract}}DeltaRepository>({{pascalCase contract}}DeltaRepository.Token)
      .toConstantValue(repository);
  }

  return repository;
};

export const setup{{pascalCase contract}}ContractService = (
  eosRpcSourceImpl: EosRpcSourceImpl,
  serviceUrl: string,
  container?: Container
): {{pascalCase contract}}ContractService => {
  const service = new {{pascalCase contract}}ContractServiceImpl(
    eosRpcSourceImpl,
    serviceUrl
  );

  if (container) {
    container
      .bind<{{pascalCase contract}}ContractService>({{pascalCase contract}}ContractService.Token)
      .toConstantValue(service);
  }

  return service;
};
