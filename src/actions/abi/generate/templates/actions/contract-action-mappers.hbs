{{! template for action mapper e.g. src/contracts/dao-worlds/actions/data/mappers/dao-worlds-action.mapper.ts }}
{{> warn-do-not-edit}}

import { 
{{#each actions}}
  {{pascalCase .}},
{{/each}}
} from '../../domain/entities';
import { 
  ContractAction, 
  MapperImpl, 
  parseToBigInt 
} from '@alien-worlds/api-core';

{{#each actions}}
import { {{pascalCase .}}MongoMapper, {{pascalCase .}}RawMapper } from "./{{.}}.mapper";
{{/each}}
import { MongoDB } from '@alien-worlds/storage-mongodb';
import { DataEntityType } from '../../domain/entities/{{paramCase contract}}-action';
import { 
  {{pascalCase contract}}ActionMongoModel,
  {{pascalCase contract}}ActionRawModel,
  {{#each actions}}
  {{pascalCase .}}MongoModel,
  {{pascalCase .}}RawModel,
  {{/each}}
} from '../dtos';
import { {{pascalCase contract}}ActionName } from '../../domain/enums';

// Mongo Mapper
export class {{pascalCase contract}}ActionMongoMapper
  extends MapperImpl<ContractAction<DataEntityType, {{pascalCase contract}}ActionMongoModel>, {{pascalCase contract}}ActionMongoModel>
{
  public fromEntity(
    entity: ContractAction<DataEntityType, {{pascalCase contract}}ActionMongoModel>
  ): {{pascalCase contract}}ActionMongoModel {
    let entityData;
    switch (entity.name) {
      {{#each actions}}
      case {{pascalCase ../contract}}ActionName.{{pascalCase .}}:
        entityData = new {{pascalCase .}}MongoMapper().fromEntity(
          entity.data as {{pascalCase .}}
        );
        break;
      {{/each}}
    }

    return {
      _id: new MongoDB.ObjectId(entity.id),
      block_timestamp: entity.blockTimestamp,
      block_number: new MongoDB.Long(entity.blockNumber),
      global_sequence: new MongoDB.Long(entity.globalSequence),
      receiver_sequence: new MongoDB.Long(entity.receiverSequence),
      trx_id: entity.transactionId,
      action: {
        name: entity.name,
        account: entity.account,
        data: entityData,
      },
    };
  }

  public toEntity(
    mongoModel: {{pascalCase contract}}ActionMongoModel
  ): ContractAction<DataEntityType, {{pascalCase contract}}ActionMongoModel> {
    let data;
    switch (mongoModel.action.name) {
      {{#each actions}}
      case {{pascalCase ../contract}}ActionName.{{pascalCase .}}:
        data = new {{pascalCase .}}MongoMapper().toEntity(
          mongoModel.action.data as {{pascalCase .}}MongoModel
        );
        break;
      {{/each}}
    }

    const {
      _id,
      block_timestamp,
      block_number,
      global_sequence,
      receiver_sequence,
      trx_id,
      action,
    } = mongoModel;

    return new ContractAction<DataEntityType, {{pascalCase contract}}ActionMongoModel>(
      _id.toString(),
      block_timestamp,
      parseToBigInt(block_number),
      action.account,
      action.name,
      parseToBigInt(global_sequence),
      parseToBigInt(receiver_sequence),
      trx_id,
      data,
    );
  }
}

// Processor Task Mapper
export class {{pascalCase contract}}ActionProcessorTaskMapper extends MapperImpl<
  ContractAction<DataEntityType, {{pascalCase contract}}ActionRawModel>,
  {{pascalCase contract}}ActionRawModel
> {
  public fromEntity(
    entity: ContractAction<DataEntityType, {{pascalCase contract}}ActionRawModel>
  ): {{pascalCase contract}}ActionRawModel {
    throw new Error('method not implemented');
  }

  public toEntity(
    rawModel: {{pascalCase contract}}ActionRawModel
  ): ContractAction<DataEntityType, {{pascalCase contract}}ActionRawModel> {
    let data;
    switch (rawModel.name) {
      {{#each actions}}
      case {{pascalCase ../contract}}ActionName.{{pascalCase .}}:
        data = new {{pascalCase .}}RawMapper().toEntity(
          rawModel.data as {{pascalCase .}}RawModel
        );
        break;
      {{/each}}
    }

    const {
      account,
      name,
      block_timestamp,
      block_number,
      global_sequence,
      recv_sequence,
      transaction_id,
    } = rawModel;

    return new ContractAction<DataEntityType, {{pascalCase contract}}ActionRawModel>(
      '',
      block_timestamp,
      parseToBigInt(block_number),
      account,
      name,
      parseToBigInt(global_sequence),
      parseToBigInt(recv_sequence),
      transaction_id,
      data
    );
  }
}
